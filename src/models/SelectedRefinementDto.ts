/* tslint:disable */
/* eslint-disable */
/**
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NavigationTypeDto } from './NavigationTypeDto';
import {
    NavigationTypeDtoFromJSON,
    NavigationTypeDtoFromJSONTyped,
    NavigationTypeDtoToJSON,
} from './NavigationTypeDto';

/**
 * Refinement the shopper has selected for filtering.
 * @export
 * @interface SelectedRefinementDto
 */
export interface SelectedRefinementDto {
    /**
     * The name of the navigation the refinement is for.
     * @type {string}
     * @memberof SelectedRefinementDto
     */
    navigationName: string;
    /**
     * 
     * @type {NavigationTypeDto}
     * @memberof SelectedRefinementDto
     */
    type: NavigationTypeDto;
    /**
     * Value of selected refinement, if type is value.
     * @type {string}
     * @memberof SelectedRefinementDto
     */
    value?: string;
    /**
     * The lowest end or value of the range, if applicable.
     * @type {number}
     * @memberof SelectedRefinementDto
     */
    low?: number;
    /**
     * The highest end or value of the range, if applicable.
     * @type {number}
     * @memberof SelectedRefinementDto
     */
    high?: number;
    /**
     * Field which is indicated that it is dynamic navigation.
     * @type {string}
     * @memberof SelectedRefinementDto
     */
    source?: string;
    /**
     * Navigation multiselect. Indicate that it is possibly to select more than one navigation value due to search request.
     * @type {boolean}
     * @memberof SelectedRefinementDto
     */
    or?: boolean;
}

/**
 * Check if a given object implements the SelectedRefinementDto interface.
 */
export function instanceOfSelectedRefinementDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "navigationName" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function SelectedRefinementDtoFromJSON(json: any): SelectedRefinementDto {
    return SelectedRefinementDtoFromJSONTyped(json, false);
}

export function SelectedRefinementDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SelectedRefinementDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'navigationName': json['navigationName'],
        'type': NavigationTypeDtoFromJSON(json['type']),
        'value': !exists(json, 'value') ? undefined : json['value'],
        'low': !exists(json, 'low') ? undefined : json['low'],
        'high': !exists(json, 'high') ? undefined : json['high'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'or': !exists(json, 'or') ? undefined : json['or'],
    };
}

export function SelectedRefinementDtoToJSON(value?: SelectedRefinementDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'navigationName': value.navigationName,
        'type': NavigationTypeDtoToJSON(value.type),
        'value': value.value,
        'low': value.low,
        'high': value.high,
        'source': value.source,
        'or': value.or,
    };
}

