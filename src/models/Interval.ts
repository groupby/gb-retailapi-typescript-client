/* tslint:disable */
/* eslint-disable */
/**
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A floating point interval.
 * @export
 * @interface Interval
 */
export interface Interval {
    /**
     * Inclusive lower bound. The lower bound of the interval. If neither of the min fields (minimum or exclusiveMinimum) are set, then the lower bound is negative infinity. This field must be not larger than maximum or exclusiveMaximum.
     * @type {number}
     * @memberof Interval
     */
    minimum?: number;
    /**
     * Exclusive lower bound. The lower bound of the interval. If neither of the min fields (minimum or exclusiveMinimum) are set, then the lower bound is negative infinity. This field must be not larger than maximum or exclusiveMaximum.
     * @type {number}
     * @memberof Interval
     */
    exclusiveMinimum?: number;
    /**
     * Inclusive upper bound. The upper bound of the interval. If neither of the max fields are set, then the upper bound is positive infinity. This field must be not smaller than minimum or exclusiveMinimum.
     * @type {number}
     * @memberof Interval
     */
    maximum?: number;
    /**
     * Exclusive upper bound. The upper bound of the interval. If neither of the max fields are set, then the upper bound is positive infinity. This field must be not smaller than minimum or exclusiveMinimum.
     * @type {number}
     * @memberof Interval
     */
    exclusiveMaximum?: number;
}

/**
 * Check if a given object implements the Interval interface.
 */
export function instanceOfInterval(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IntervalFromJSON(json: any): Interval {
    return IntervalFromJSONTyped(json, false);
}

export function IntervalFromJSONTyped(json: any, ignoreDiscriminator: boolean): Interval {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'minimum': !exists(json, 'minimum') ? undefined : json['minimum'],
        'exclusiveMinimum': !exists(json, 'exclusiveMinimum') ? undefined : json['exclusiveMinimum'],
        'maximum': !exists(json, 'maximum') ? undefined : json['maximum'],
        'exclusiveMaximum': !exists(json, 'exclusiveMaximum') ? undefined : json['exclusiveMaximum'],
    };
}

export function IntervalToJSON(value?: Interval | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'minimum': value.minimum,
        'exclusiveMinimum': value.exclusiveMinimum,
        'maximum': value.maximum,
        'exclusiveMaximum': value.exclusiveMaximum,
    };
}

