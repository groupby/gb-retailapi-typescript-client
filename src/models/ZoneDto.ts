/* tslint:disable */
/* eslint-disable */
/**
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ZoneDtoType } from './ZoneDtoType';
import {
    ZoneDtoTypeFromJSON,
    ZoneDtoTypeFromJSONTyped,
    ZoneDtoTypeToJSON,
} from './ZoneDtoType';

/**
 * UI zones, that may contain code snippets, sub-searches and etc.
 * @export
 * @interface ZoneDto
 */
export interface ZoneDto {
    /**
     * A name for the zone, ideally human-readable.
     * @type {string}
     * @memberof ZoneDto
     */
    name?: string;
    /**
     * 
     * @type {ZoneDtoType}
     * @memberof ZoneDto
     */
    type?: ZoneDtoType;
    /**
     * Zone content - it is can be any data, HTML - code, usual text or etc
     * @type {string}
     * @memberof ZoneDto
     */
    content?: string;
    /**
     * Zone content - it is can be any data, HTML - code, usual text or etc
     * @type {string}
     * @memberof ZoneDto
     */
    richContent?: string;
}

/**
 * Check if a given object implements the ZoneDto interface.
 */
export function instanceOfZoneDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ZoneDtoFromJSON(json: any): ZoneDto {
    return ZoneDtoFromJSONTyped(json, false);
}

export function ZoneDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ZoneDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'type': !exists(json, 'type') ? undefined : ZoneDtoTypeFromJSON(json['type']),
        'content': !exists(json, 'content') ? undefined : json['content'],
        'richContent': !exists(json, 'richContent') ? undefined : json['richContent'],
    };
}

export function ZoneDtoToJSON(value?: ZoneDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': ZoneDtoTypeToJSON(value.type),
        'content': value.content,
        'richContent': value.richContent,
    };
}

