/* tslint:disable */
/* eslint-disable */
/**
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ValueFilter
 */
export interface ValueFilter {
    /**
     * Field the value applies to.
     * @type {string}
     * @memberof ValueFilter
     */
    field: string;
    /**
     * Value to filter on.
     * @type {string}
     * @memberof ValueFilter
     */
    value: string;
    /**
     * Numeric value to filter on.
     * @type {number}
     * @memberof ValueFilter
     */
    numberValue: number;
    /**
     * Describing whether the filter is negated or not: color that is NOT red.
     * @type {boolean}
     * @memberof ValueFilter
     */
    exclude: boolean;
    /**
     * Determine which field we need to use - value if 'TEXTUAL' type or numberValue if 'NUMERIC' type.
     * @type {any}
     * @memberof ValueFilter
     */
    type: any | null;
}

/**
 * Check if a given object implements the ValueFilter interface.
 */
export function instanceOfValueFilter(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "field" in value;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "numberValue" in value;
    isInstance = isInstance && "exclude" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ValueFilterFromJSON(json: any): ValueFilter {
    return ValueFilterFromJSONTyped(json, false);
}

export function ValueFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValueFilter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'field': json['field'],
        'value': json['value'],
        'numberValue': json['numberValue'],
        'exclude': json['exclude'],
        'type': json['type'],
    };
}

export function ValueFilterToJSON(value?: ValueFilter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'field': value.field,
        'value': value.value,
        'numberValue': value.numberValue,
        'exclude': value.exclude,
        'type': value.type,
    };
}

