/* tslint:disable */
/* eslint-disable */
/**
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Object which is represent autocomplete request and encapsulate all passed parameters.
 * @export
 * @interface Request
 */
export interface Request {
    /**
     * Area i.e. 'Production' Will not be used immediately. This will be useful when we eventually need to support a US area vs a Canada area. But this would require using the custom dataset instead of user-generated.
     * @type {string}
     * @memberof Request
     */
    area: string;
    /**
     * Name of the collection used to determine the retail backend to use. Usually it is name which is associated with retail project in command center (project configuration).
     * @type {string}
     * @memberof Request
     */
    collection: string;
    /**
     * Completion max suggestions. The maximum allowed max suggestions is 20.
     * @type {number}
     * @memberof Request
     */
    searchItems: number;
    /**
     * String. Required. The query used to generate suggestions. The maximum number of allowed characters is 255.
     * @type {string}
     * @memberof Request
     */
    query: string;
    /**
     * Enable attribute suggestions, by setting the field enableAttributeSuggestion=true in the API request. Then in
     * response, there will be an additional field attributeResults to show direct match results on brands/categories
     * 
     * Note that attribute results directly come from the products we import and Google does not apply any cleaning on
     * them.
     * @type {boolean}
     * @memberof Request
     */
    enableAttributeSuggestion?: boolean;
    /**
     * Optional param which is define if extended suggestions will be returned in autocomplete response or not.
     * Possibly values: true, false, not specified (If not specified default collection setting will be used).
     * @type {boolean}
     * @memberof Request
     */
    extendedSuggestions?: boolean | null;
    /**
     *     List with extended attributes which are would be returned in autocomplete response.
     *     Requires extendedSuggestions to be enabled using search param or on collection layer.
     * @type {Array<string>}
     * @memberof Request
     */
    extendedAttributes?: Array<string> | null;
    /**
     * String. Not required field. A unique identifier for tracking visitors. For example, this could be implemented
     * with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique
     * identifier should not change if the visitor logs in or out of the website. The field must be a UTF-8 encoded
     * string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.
     * @type {string}
     * @memberof Request
     */
    visitorId?: string | null;
    /**
     * Name of site filter. If not specified, the specified area's default site will be applied if configured in Command Center. To not use default specify empty value i.e."".  If the site doesn't exist then the search will execute without the site filter.
     * @type {string}
     * @memberof Request
     */
    site?: string | null;
}

/**
 * Check if a given object implements the Request interface.
 */
export function instanceOfRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "area" in value;
    isInstance = isInstance && "collection" in value;
    isInstance = isInstance && "searchItems" in value;
    isInstance = isInstance && "query" in value;

    return isInstance;
}

export function RequestFromJSON(json: any): Request {
    return RequestFromJSONTyped(json, false);
}

export function RequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): Request {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'area': json['area'],
        'collection': json['collection'],
        'searchItems': json['searchItems'],
        'query': json['query'],
        'enableAttributeSuggestion': !exists(json, 'enableAttributeSuggestion') ? undefined : json['enableAttributeSuggestion'],
        'extendedSuggestions': !exists(json, 'extendedSuggestions') ? undefined : json['extendedSuggestions'],
        'extendedAttributes': !exists(json, 'extendedAttributes') ? undefined : json['extendedAttributes'],
        'visitorId': !exists(json, 'visitorId') ? undefined : json['visitorId'],
        'site': !exists(json, 'site') ? undefined : json['site'],
    };
}

export function RequestToJSON(value?: Request | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'area': value.area,
        'collection': value.collection,
        'searchItems': value.searchItems,
        'query': value.query,
        'enableAttributeSuggestion': value.enableAttributeSuggestion,
        'extendedSuggestions': value.extendedSuggestions,
        'extendedAttributes': value.extendedAttributes,
        'visitorId': value.visitorId,
        'site': value.site,
    };
}

