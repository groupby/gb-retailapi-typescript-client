/* tslint:disable */
/* eslint-disable */
/**
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NavigationType } from './NavigationType';
import {
    NavigationTypeFromJSON,
    NavigationTypeFromJSONTyped,
    NavigationTypeToJSON,
} from './NavigationType';

/**
 * A facet specification to perform faceted search.
 * @export
 * @interface Facet
 */
export interface Facet {
    /**
     * Only get facet values that start with the given string prefix. For example, suppose "categories" has three values "Women > Shoe", "Women > Dress" and "Men > Shoe". If set "prefixes" to "Women", the "categories" facet will give only "Women > Shoe" and "Women > Dress". Only supported on textual fields. Maximum is 10. This field is case-sensitive
     * @type {string}
     * @memberof Facet
     */
    prefix?: string;
    /**
     * Only get facet values that contains the given strings. For example, suppose "categories" has three values "Women > Shoe", "Women > Dress" and "Men > Shoe". If set "contains" to "Shoe", the "categories" facet will give only "Women > Shoe" and "Men > Shoe". Only supported on textual fields. Maximum is 10. This field is case-sensitive
     * @type {string}
     * @memberof Facet
     */
    contains?: string;
    /**
     * Display name of facet
     * @type {string}
     * @memberof Facet
     */
    displayName?: string;
    /**
     * 
     * @type {NavigationType}
     * @memberof Facet
     */
    type?: NavigationType;
    /**
     * Represents the name of navigation.
     * @type {string}
     * @memberof Facet
     */
    navigationName?: string;
}

/**
 * Check if a given object implements the Facet interface.
 */
export function instanceOfFacet(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FacetFromJSON(json: any): Facet {
    return FacetFromJSONTyped(json, false);
}

export function FacetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Facet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'prefix': !exists(json, 'prefix') ? undefined : json['prefix'],
        'contains': !exists(json, 'contains') ? undefined : json['contains'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'type': !exists(json, 'type') ? undefined : NavigationTypeFromJSON(json['type']),
        'navigationName': !exists(json, 'navigationName') ? undefined : json['navigationName'],
    };
}

export function FacetToJSON(value?: Facet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'prefix': value.prefix,
        'contains': value.contains,
        'displayName': value.displayName,
        'type': NavigationTypeToJSON(value.type),
        'navigationName': value.navigationName,
    };
}

