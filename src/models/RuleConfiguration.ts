/* tslint:disable */
/* eslint-disable */
/**
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BoostedProductBucket } from './BoostedProductBucket';
import {
    BoostedProductBucketFromJSON,
    BoostedProductBucketFromJSONTyped,
    BoostedProductBucketToJSON,
} from './BoostedProductBucket';
import type { ExperimentVariant } from './ExperimentVariant';
import {
    ExperimentVariantFromJSON,
    ExperimentVariantFromJSONTyped,
    ExperimentVariantToJSON,
} from './ExperimentVariant';
import type { MessageType } from './MessageType';
import {
    MessageTypeFromJSON,
    MessageTypeFromJSONTyped,
    MessageTypeToJSON,
} from './MessageType';
import type { PinnedRefinement } from './PinnedRefinement';
import {
    PinnedRefinementFromJSON,
    PinnedRefinementFromJSONTyped,
    PinnedRefinementToJSON,
} from './PinnedRefinement';
import type { RangeFilter } from './RangeFilter';
import {
    RangeFilterFromJSON,
    RangeFilterFromJSONTyped,
    RangeFilterToJSON,
} from './RangeFilter';
import type { RuleTemplate } from './RuleTemplate';
import {
    RuleTemplateFromJSON,
    RuleTemplateFromJSONTyped,
    RuleTemplateToJSON,
} from './RuleTemplate';
import type { RuleType } from './RuleType';
import {
    RuleTypeFromJSON,
    RuleTypeFromJSONTyped,
    RuleTypeToJSON,
} from './RuleType';
import type { SearchFilter } from './SearchFilter';
import {
    SearchFilterFromJSON,
    SearchFilterFromJSONTyped,
    SearchFilterToJSON,
} from './SearchFilter';
import type { Sort } from './Sort';
import {
    SortFromJSON,
    SortFromJSONTyped,
    SortToJSON,
} from './Sort';
import type { TriggerSet } from './TriggerSet';
import {
    TriggerSetFromJSON,
    TriggerSetFromJSONTyped,
    TriggerSetToJSON,
} from './TriggerSet';
import type { ValueFilter } from './ValueFilter';
import {
    ValueFilterFromJSON,
    ValueFilterFromJSONTyped,
    ValueFilterToJSON,
} from './ValueFilter';

/**
 * 
 * @export
 * @interface RuleConfiguration
 */
export interface RuleConfiguration {
    /**
     * 
     * @type {boolean}
     * @memberof RuleConfiguration
     */
    ruleInExperiment?: boolean;
    /**
     * 
     * @type {number}
     * @memberof RuleConfiguration
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof RuleConfiguration
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof RuleConfiguration
     */
    areaId: number;
    /**
     * 
     * @type {number}
     * @memberof RuleConfiguration
     */
    priority: number;
    /**
     * 
     * @type {boolean}
     * @memberof RuleConfiguration
     */
    enabled: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RuleConfiguration
     */
    activeHoursEnabled: boolean;
    /**
     * 
     * @type {number}
     * @memberof RuleConfiguration
     */
    activeFrom: number;
    /**
     * 
     * @type {number}
     * @memberof RuleConfiguration
     */
    activeTo: number;
    /**
     * 
     * @type {Array<TriggerSet>}
     * @memberof RuleConfiguration
     */
    triggerSets: Array<TriggerSet>;
    /**
     * 
     * @type {string}
     * @memberof RuleConfiguration
     */
    biasingProfileName: string;
    /**
     * 
     * @type {Sort}
     * @memberof RuleConfiguration
     */
    sort: Sort;
    /**
     * 
     * @type {Array<string>}
     * @memberof RuleConfiguration
     */
    includedNavigations: Array<string>;
    /**
     * 
     * @type {Array<ValueFilter>}
     * @memberof RuleConfiguration
     */
    valueFilters: Array<ValueFilter>;
    /**
     * 
     * @type {Array<SearchFilter>}
     * @memberof RuleConfiguration
     */
    searchFilters: Array<SearchFilter>;
    /**
     * 
     * @type {Array<RangeFilter>}
     * @memberof RuleConfiguration
     */
    rangeFilters: Array<RangeFilter>;
    /**
     * 
     * @type {RuleTemplate}
     * @memberof RuleConfiguration
     */
    template: RuleTemplate;
    /**
     * 
     * @type {Array<BoostedProductBucket>}
     * @memberof RuleConfiguration
     */
    boostedProductBuckets: Array<BoostedProductBucket> | null;
    /**
     * 
     * @type {Array<PinnedRefinement>}
     * @memberof RuleConfiguration
     */
    pinnedRefinements: Array<PinnedRefinement>;
    /**
     * 
     * @type {MessageType}
     * @memberof RuleConfiguration
     */
    messageType: MessageType;
    /**
     * 
     * @type {RuleType}
     * @memberof RuleConfiguration
     */
    type: RuleType;
    /**
     * 
     * @type {Array<ExperimentVariant>}
     * @memberof RuleConfiguration
     */
    variants: Array<ExperimentVariant>;
}

/**
 * Check if a given object implements the RuleConfiguration interface.
 */
export function instanceOfRuleConfiguration(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "areaId" in value;
    isInstance = isInstance && "priority" in value;
    isInstance = isInstance && "enabled" in value;
    isInstance = isInstance && "activeHoursEnabled" in value;
    isInstance = isInstance && "activeFrom" in value;
    isInstance = isInstance && "activeTo" in value;
    isInstance = isInstance && "triggerSets" in value;
    isInstance = isInstance && "biasingProfileName" in value;
    isInstance = isInstance && "sort" in value;
    isInstance = isInstance && "includedNavigations" in value;
    isInstance = isInstance && "valueFilters" in value;
    isInstance = isInstance && "searchFilters" in value;
    isInstance = isInstance && "rangeFilters" in value;
    isInstance = isInstance && "template" in value;
    isInstance = isInstance && "boostedProductBuckets" in value;
    isInstance = isInstance && "pinnedRefinements" in value;
    isInstance = isInstance && "messageType" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "variants" in value;

    return isInstance;
}

export function RuleConfigurationFromJSON(json: any): RuleConfiguration {
    return RuleConfigurationFromJSONTyped(json, false);
}

export function RuleConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): RuleConfiguration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ruleInExperiment': !exists(json, 'ruleInExperiment') ? undefined : json['ruleInExperiment'],
        'id': json['id'],
        'name': json['name'],
        'areaId': json['areaId'],
        'priority': json['priority'],
        'enabled': json['enabled'],
        'activeHoursEnabled': json['activeHoursEnabled'],
        'activeFrom': json['activeFrom'],
        'activeTo': json['activeTo'],
        'triggerSets': ((json['triggerSets'] as Array<any>).map(TriggerSetFromJSON)),
        'biasingProfileName': json['biasingProfileName'],
        'sort': SortFromJSON(json['sort']),
        'includedNavigations': json['includedNavigations'],
        'valueFilters': ((json['valueFilters'] as Array<any>).map(ValueFilterFromJSON)),
        'searchFilters': ((json['searchFilters'] as Array<any>).map(SearchFilterFromJSON)),
        'rangeFilters': ((json['rangeFilters'] as Array<any>).map(RangeFilterFromJSON)),
        'template': RuleTemplateFromJSON(json['template']),
        'boostedProductBuckets': (json['boostedProductBuckets'] === null ? null : (json['boostedProductBuckets'] as Array<any>).map(BoostedProductBucketFromJSON)),
        'pinnedRefinements': ((json['pinnedRefinements'] as Array<any>).map(PinnedRefinementFromJSON)),
        'messageType': MessageTypeFromJSON(json['messageType']),
        'type': RuleTypeFromJSON(json['type']),
        'variants': ((json['variants'] as Array<any>).map(ExperimentVariantFromJSON)),
    };
}

export function RuleConfigurationToJSON(value?: RuleConfiguration | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ruleInExperiment': value.ruleInExperiment,
        'id': value.id,
        'name': value.name,
        'areaId': value.areaId,
        'priority': value.priority,
        'enabled': value.enabled,
        'activeHoursEnabled': value.activeHoursEnabled,
        'activeFrom': value.activeFrom,
        'activeTo': value.activeTo,
        'triggerSets': ((value.triggerSets as Array<any>).map(TriggerSetToJSON)),
        'biasingProfileName': value.biasingProfileName,
        'sort': SortToJSON(value.sort),
        'includedNavigations': value.includedNavigations,
        'valueFilters': ((value.valueFilters as Array<any>).map(ValueFilterToJSON)),
        'searchFilters': ((value.searchFilters as Array<any>).map(SearchFilterToJSON)),
        'rangeFilters': ((value.rangeFilters as Array<any>).map(RangeFilterToJSON)),
        'template': RuleTemplateToJSON(value.template),
        'boostedProductBuckets': (value.boostedProductBuckets === null ? null : (value.boostedProductBuckets as Array<any>).map(BoostedProductBucketToJSON)),
        'pinnedRefinements': ((value.pinnedRefinements as Array<any>).map(PinnedRefinementToJSON)),
        'messageType': MessageTypeToJSON(value.messageType),
        'type': RuleTypeToJSON(value.type),
        'variants': ((value.variants as Array<any>).map(ExperimentVariantToJSON)),
    };
}

