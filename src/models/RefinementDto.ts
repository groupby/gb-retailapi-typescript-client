/* tslint:disable */
/* eslint-disable */
/**
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NavigationTypeDto } from './NavigationTypeDto';
import {
    NavigationTypeDtoFromJSON,
    NavigationTypeDtoFromJSONTyped,
    NavigationTypeDtoToJSON,
} from './NavigationTypeDto';

/**
 * Refinement value or range in the navigation.
 * @export
 * @interface RefinementDto
 */
export interface RefinementDto {
    /**
     * 
     * @type {NavigationTypeDto}
     * @memberof RefinementDto
     */
    type: NavigationTypeDto;
    /**
     * Number of products which match this refinement value or range.
     * @type {number}
     * @memberof RefinementDto
     */
    count?: number;
    /**
     * Value of the refinement.
     * @type {string}
     * @memberof RefinementDto
     */
    value?: string;
    /**
     * Lower bound of the refinement range.
     * @type {number}
     * @memberof RefinementDto
     */
    low?: number;
    /**
     * Upper bound  of the refinement range.
     * @type {number}
     * @memberof RefinementDto
     */
    high?: number;
}

/**
 * Check if a given object implements the RefinementDto interface.
 */
export function instanceOfRefinementDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function RefinementDtoFromJSON(json: any): RefinementDto {
    return RefinementDtoFromJSONTyped(json, false);
}

export function RefinementDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): RefinementDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': NavigationTypeDtoFromJSON(json['type']),
        'count': !exists(json, 'count') ? undefined : json['count'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'low': !exists(json, 'low') ? undefined : json['low'],
        'high': !exists(json, 'high') ? undefined : json['high'],
    };
}

export function RefinementDtoToJSON(value?: RefinementDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': NavigationTypeDtoToJSON(value.type),
        'count': value.count,
        'value': value.value,
        'low': value.low,
        'high': value.high,
    };
}

