/* tslint:disable */
/* eslint-disable */
/**
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DebugDto } from './DebugDto';
import {
    DebugDtoFromJSON,
    DebugDtoFromJSONTyped,
    DebugDtoToJSON,
} from './DebugDto';
import type { Experiment } from './Experiment';
import {
    ExperimentFromJSON,
    ExperimentFromJSONTyped,
    ExperimentToJSON,
} from './Experiment';
import type { Metadata } from './Metadata';
import {
    MetadataFromJSON,
    MetadataFromJSONTyped,
    MetadataToJSON,
} from './Metadata';
import type { NavigationDto } from './NavigationDto';
import {
    NavigationDtoFromJSON,
    NavigationDtoFromJSONTyped,
    NavigationDtoToJSON,
} from './NavigationDto';
import type { PageInfoDto } from './PageInfoDto';
import {
    PageInfoDtoFromJSON,
    PageInfoDtoFromJSONTyped,
    PageInfoDtoToJSON,
} from './PageInfoDto';
import type { RecordDto } from './RecordDto';
import {
    RecordDtoFromJSON,
    RecordDtoFromJSONTyped,
    RecordDtoToJSON,
} from './RecordDto';
import type { SearchMetadataDto } from './SearchMetadataDto';
import {
    SearchMetadataDtoFromJSON,
    SearchMetadataDtoFromJSONTyped,
    SearchMetadataDtoToJSON,
} from './SearchMetadataDto';
import type { SearchRequestDto } from './SearchRequestDto';
import {
    SearchRequestDtoFromJSON,
    SearchRequestDtoFromJSONTyped,
    SearchRequestDtoToJSON,
} from './SearchRequestDto';
import type { TemplateDto } from './TemplateDto';
import {
    TemplateDtoFromJSON,
    TemplateDtoFromJSONTyped,
    TemplateDtoToJSON,
} from './TemplateDto';

/**
 * Response of calling the search API, including various elements of the original request context, matching records and general metadata relating to the results.
 * @export
 * @interface SearchResponseDto
 */
export interface SearchResponseDto {
    /**
     * Unique identifier for the search.
     * @type {string}
     * @memberof SearchResponseDto
     */
    id?: string;
    /**
     * Area Id the search was performed in.
     * @type {string}
     * @memberof SearchResponseDto
     */
    area?: string;
    /**
     * Original search query.
     * @type {string}
     * @memberof SearchResponseDto
     */
    query?: string;
    /**
     * Search query after any changes/corrections are done by the engine.
     * @type {string}
     * @memberof SearchResponseDto
     */
    correctedQuery?: string;
    /**
     * Name of the biasing profile which was used to bias products in the search results.
     * @type {string}
     * @memberof SearchResponseDto
     */
    biasingProfile?: string;
    /**
     * Id of the biasing profile which was used to bias products in the search results.
     * @type {number}
     * @memberof SearchResponseDto
     */
    biasingProfileAppliedId?: number;
    /**
     * 
     * @type {string}
     * @memberof SearchResponseDto
     */
    filter: string;
    /**
     * 
     * @type {SearchRequestDto}
     * @memberof SearchResponseDto
     */
    originalRequest: SearchRequestDto;
    /**
     * The list of records that match the search.
     * @type {Array<RecordDto>}
     * @memberof SearchResponseDto
     */
    records?: Array<RecordDto>;
    /**
     * The total number of products that match the search. If all products were filtered out on S4R site equals to 0.
     * @type {number}
     * @memberof SearchResponseDto
     */
    totalRecordCount?: number;
    /**
     * 
     * @type {SearchMetadataDto}
     * @memberof SearchResponseDto
     */
    metadata: SearchMetadataDto;
    /**
     * 
     * @type {PageInfoDto}
     * @memberof SearchResponseDto
     */
    pageInfo: PageInfoDto;
    /**
     * 
     * @type {Array<NavigationDto>}
     * @memberof SearchResponseDto
     */
    availableNavigation: Array<NavigationDto>;
    /**
     * 
     * @type {Array<NavigationDto>}
     * @memberof SearchResponseDto
     */
    selectedNavigation: Array<NavigationDto>;
    /**
     * URL to which the merchandiser should redirect the shopper to.
     * @type {string}
     * @memberof SearchResponseDto
     */
    redirect?: string;
    /**
     * 
     * @type {Array<Experiment>}
     * @memberof SearchResponseDto
     */
    experiments: Array<Experiment>;
    /**
     * 
     * @type {TemplateDto}
     * @memberof SearchResponseDto
     */
    template: TemplateDto;
    /**
     * True if the search yielded no results, otherwise false.
     * @type {boolean}
     * @memberof SearchResponseDto
     */
    empty?: boolean;
    /**
     * 
     * @type {Array<Metadata>}
     * @memberof SearchResponseDto
     */
    siteParams: Array<Metadata>;
    /**
     * 
     * @type {DebugDto}
     * @memberof SearchResponseDto
     */
    debug: DebugDto;
    /**
     * Warning messages containing information about invalid products, etc.
     * @type {Array<string>}
     * @memberof SearchResponseDto
     */
    warnings?: Array<string>;
    /**
     * When a shopper uses an ambiguous or a multi-word search phrase, they can get an empty response. After turning on include expanded results, Retail Search analyzes the request and returns the expanded list of products based on the parsed search query. For example, if you search "Google Pixel 5" without query expansion, you might only get "google_pixel_5" in the result. With query expansion, you might get "google_pixel_4a_with_5g", "google_pixel_4a" and "google_pixel_5_case" as well.The default value is configured in the tenant settings or true if there is no such setting
     * @type {boolean}
     * @memberof SearchResponseDto
     */
    includeExpandedResults?: boolean;
    /**
     * Maximum of facet values that should be returned for this facet. If not specified, defaults to 20.
     * The maximum allowed value is 300. Values above 300 will be coerced to 300.
     * 
     * If this field is negative, an INVALID_ARGUMENT is returned.
     * 
     * This limit (300) is configured on Google side, but Google have an ability to change it for specific project.
     * @type {number}
     * @memberof SearchResponseDto
     */
    facetLimit?: number;
    /**
     * 
     * @type {Array<Metadata>}
     * @memberof SearchResponseDto
     */
    redirectMetadata: Array<Metadata>;
}

/**
 * Check if a given object implements the SearchResponseDto interface.
 */
export function instanceOfSearchResponseDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "filter" in value;
    isInstance = isInstance && "originalRequest" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "pageInfo" in value;
    isInstance = isInstance && "availableNavigation" in value;
    isInstance = isInstance && "selectedNavigation" in value;
    isInstance = isInstance && "experiments" in value;
    isInstance = isInstance && "template" in value;
    isInstance = isInstance && "siteParams" in value;
    isInstance = isInstance && "debug" in value;
    isInstance = isInstance && "redirectMetadata" in value;

    return isInstance;
}

export function SearchResponseDtoFromJSON(json: any): SearchResponseDto {
    return SearchResponseDtoFromJSONTyped(json, false);
}

export function SearchResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchResponseDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'area': !exists(json, 'area') ? undefined : json['area'],
        'query': !exists(json, 'query') ? undefined : json['query'],
        'correctedQuery': !exists(json, 'correctedQuery') ? undefined : json['correctedQuery'],
        'biasingProfile': !exists(json, 'biasingProfile') ? undefined : json['biasingProfile'],
        'biasingProfileAppliedId': !exists(json, 'biasingProfileAppliedId') ? undefined : json['biasingProfileAppliedId'],
        'filter': json['filter'],
        'originalRequest': SearchRequestDtoFromJSON(json['originalRequest']),
        'records': !exists(json, 'records') ? undefined : ((json['records'] as Array<any>).map(RecordDtoFromJSON)),
        'totalRecordCount': !exists(json, 'totalRecordCount') ? undefined : json['totalRecordCount'],
        'metadata': SearchMetadataDtoFromJSON(json['metadata']),
        'pageInfo': PageInfoDtoFromJSON(json['pageInfo']),
        'availableNavigation': ((json['availableNavigation'] as Array<any>).map(NavigationDtoFromJSON)),
        'selectedNavigation': ((json['selectedNavigation'] as Array<any>).map(NavigationDtoFromJSON)),
        'redirect': !exists(json, 'redirect') ? undefined : json['redirect'],
        'experiments': ((json['experiments'] as Array<any>).map(ExperimentFromJSON)),
        'template': TemplateDtoFromJSON(json['template']),
        'empty': !exists(json, 'empty') ? undefined : json['empty'],
        'siteParams': ((json['siteParams'] as Array<any>).map(MetadataFromJSON)),
        'debug': DebugDtoFromJSON(json['debug']),
        'warnings': !exists(json, 'warnings') ? undefined : json['warnings'],
        'includeExpandedResults': !exists(json, 'includeExpandedResults') ? undefined : json['includeExpandedResults'],
        'facetLimit': !exists(json, 'facetLimit') ? undefined : json['facetLimit'],
        'redirectMetadata': ((json['redirectMetadata'] as Array<any>).map(MetadataFromJSON)),
    };
}

export function SearchResponseDtoToJSON(value?: SearchResponseDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'area': value.area,
        'query': value.query,
        'correctedQuery': value.correctedQuery,
        'biasingProfile': value.biasingProfile,
        'biasingProfileAppliedId': value.biasingProfileAppliedId,
        'filter': value.filter,
        'originalRequest': SearchRequestDtoToJSON(value.originalRequest),
        'records': value.records === undefined ? undefined : ((value.records as Array<any>).map(RecordDtoToJSON)),
        'totalRecordCount': value.totalRecordCount,
        'metadata': SearchMetadataDtoToJSON(value.metadata),
        'pageInfo': PageInfoDtoToJSON(value.pageInfo),
        'availableNavigation': ((value.availableNavigation as Array<any>).map(NavigationDtoToJSON)),
        'selectedNavigation': ((value.selectedNavigation as Array<any>).map(NavigationDtoToJSON)),
        'redirect': value.redirect,
        'experiments': ((value.experiments as Array<any>).map(ExperimentToJSON)),
        'template': TemplateDtoToJSON(value.template),
        'empty': value.empty,
        'siteParams': ((value.siteParams as Array<any>).map(MetadataToJSON)),
        'debug': DebugDtoToJSON(value.debug),
        'warnings': value.warnings,
        'includeExpandedResults': value.includeExpandedResults,
        'facetLimit': value.facetLimit,
        'redirectMetadata': ((value.redirectMetadata as Array<any>).map(MetadataToJSON)),
    };
}

