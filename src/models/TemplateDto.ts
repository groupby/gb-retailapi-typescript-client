/* tslint:disable */
/* eslint-disable */
/**
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TemplateDtoTriggerSet } from './TemplateDtoTriggerSet';
import {
    TemplateDtoTriggerSetFromJSON,
    TemplateDtoTriggerSetFromJSONTyped,
    TemplateDtoTriggerSetToJSON,
} from './TemplateDtoTriggerSet';
import type { ZoneDto } from './ZoneDto';
import {
    ZoneDtoFromJSON,
    ZoneDtoFromJSONTyped,
    ZoneDtoToJSON,
} from './ZoneDto';

/**
 * Template to assist the front end application in rendering the UI. Currently only the triggered rule name will be included, or the 'default' template name to indicate no rule was triggered. This is to mainly compatibility with the Searchandiser API and the addition of templates in the future. Template is search agnostic and do not affect search request or result. Templated selected only by triggered rule.
 * @export
 * @interface TemplateDto
 */
export interface TemplateDto {
    /**
     * Name of the template.
     * @type {string}
     * @memberof TemplateDto
     */
    name?: string;
    /**
     * Name of the rule which may have triggered.
     * @type {string}
     * @memberof TemplateDto
     */
    ruleName?: string;
    /**
     * 
     * @type {TemplateDtoTriggerSet}
     * @memberof TemplateDto
     */
    triggerSet?: TemplateDtoTriggerSet;
    /**
     * Zones for linked template.
     * @type {Array<ZoneDto>}
     * @memberof TemplateDto
     */
    zones?: Array<ZoneDto>;
}

/**
 * Check if a given object implements the TemplateDto interface.
 */
export function instanceOfTemplateDto(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TemplateDtoFromJSON(json: any): TemplateDto {
    return TemplateDtoFromJSONTyped(json, false);
}

export function TemplateDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplateDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'ruleName': !exists(json, 'ruleName') ? undefined : json['ruleName'],
        'triggerSet': !exists(json, 'triggerSet') ? undefined : TemplateDtoTriggerSetFromJSON(json['triggerSet']),
        'zones': !exists(json, 'zones') ? undefined : ((json['zones'] as Array<any>).map(ZoneDtoFromJSON)),
    };
}

export function TemplateDtoToJSON(value?: TemplateDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'ruleName': value.ruleName,
        'triggerSet': TemplateDtoTriggerSetToJSON(value.triggerSet),
        'zones': value.zones === undefined ? undefined : ((value.zones as Array<any>).map(ZoneDtoToJSON)),
    };
}

