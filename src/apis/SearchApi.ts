/* tslint:disable */
/* eslint-disable */
/**
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorDto,
  FacetSearchRequestDto,
  FacetSearchResponseDto,
  SearchRequestDto,
  SearchResponseDto,
} from '../models/index';
import {
    ErrorDtoFromJSON,
    ErrorDtoToJSON,
    FacetSearchRequestDtoFromJSON,
    FacetSearchRequestDtoToJSON,
    FacetSearchResponseDtoFromJSON,
    FacetSearchResponseDtoToJSON,
    SearchRequestDtoFromJSON,
    SearchRequestDtoToJSON,
    SearchResponseDtoFromJSON,
    SearchResponseDtoToJSON,
} from '../models/index';

export interface FacetSearchRequest {
    xGroupbyCustomerId: string;
    facetSearchRequestDto: FacetSearchRequestDto;
}

export interface SearchRequest {
    xGroupbyCustomerId: string;
    searchRequestDto: SearchRequestDto;
}

/**
 * 
 */
export class SearchApi extends runtime.BaseAPI {

    /**
     * Perform a facet search against the GroupBy Retail Search API.
     * Provided search functionality
     */
    async facetSearchRaw(requestParameters: FacetSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacetSearchResponseDto>> {
        if (requestParameters.xGroupbyCustomerId === null || requestParameters.xGroupbyCustomerId === undefined) {
            throw new runtime.RequiredError('xGroupbyCustomerId','Required parameter requestParameters.xGroupbyCustomerId was null or undefined when calling facetSearch.');
        }

        if (requestParameters.facetSearchRequestDto === null || requestParameters.facetSearchRequestDto === undefined) {
            throw new runtime.RequiredError('facetSearchRequestDto','Required parameter requestParameters.facetSearchRequestDto was null or undefined when calling facetSearch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xGroupbyCustomerId !== undefined && requestParameters.xGroupbyCustomerId !== null) {
            headerParameters['X-Groupby-Customer-Id'] = String(requestParameters.xGroupbyCustomerId);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ClientKey authentication
        }

        const response = await this.request({
            path: `/api/search/facet`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FacetSearchRequestDtoToJSON(requestParameters.facetSearchRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FacetSearchResponseDtoFromJSON(jsonValue));
    }

    /**
     * Perform a facet search against the GroupBy Retail Search API.
     * Provided search functionality
     */
    async facetSearch(requestParameters: FacetSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacetSearchResponseDto> {
        const response = await this.facetSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform a search against the GroupBy Retail Search API.
     * Provided search functionality
     */
    async searchRaw(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponseDto>> {
        if (requestParameters.xGroupbyCustomerId === null || requestParameters.xGroupbyCustomerId === undefined) {
            throw new runtime.RequiredError('xGroupbyCustomerId','Required parameter requestParameters.xGroupbyCustomerId was null or undefined when calling search.');
        }

        if (requestParameters.searchRequestDto === null || requestParameters.searchRequestDto === undefined) {
            throw new runtime.RequiredError('searchRequestDto','Required parameter requestParameters.searchRequestDto was null or undefined when calling search.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xGroupbyCustomerId !== undefined && requestParameters.xGroupbyCustomerId !== null) {
            headerParameters['X-Groupby-Customer-Id'] = String(requestParameters.xGroupbyCustomerId);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ClientKey authentication
        }

        const response = await this.request({
            path: `/api/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestDtoToJSON(requestParameters.searchRequestDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResponseDtoFromJSON(jsonValue));
    }

    /**
     * Perform a search against the GroupBy Retail Search API.
     * Provided search functionality
     */
    async search(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponseDto> {
        const response = await this.searchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
