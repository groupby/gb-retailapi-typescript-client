/* tslint:disable */
/* eslint-disable */
/**
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  Identity,
  Merchandiser,
  Request,
  SearchResults,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    IdentityFromJSON,
    IdentityToJSON,
    MerchandiserFromJSON,
    MerchandiserToJSON,
    RequestFromJSON,
    RequestToJSON,
    SearchResultsFromJSON,
    SearchResultsToJSON,
} from '../models/index';

export interface AutocompletesearchRequest {
    xGroupbyCustomerId: string;
    identity: Identity;
    merchandiser: Merchandiser;
    request?: Request;
}

/**
 * 
 */
export class AutocompleteApi extends runtime.BaseAPI {

    /**
     * A simple request used to get completes the specified prefix with keyword suggestions.
     */
    async autocompletesearchRaw(requestParameters: AutocompletesearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResults>> {
        if (requestParameters.xGroupbyCustomerId === null || requestParameters.xGroupbyCustomerId === undefined) {
            throw new runtime.RequiredError('xGroupbyCustomerId','Required parameter requestParameters.xGroupbyCustomerId was null or undefined when calling autocompletesearch.');
        }

        if (requestParameters.identity === null || requestParameters.identity === undefined) {
            throw new runtime.RequiredError('identity','Required parameter requestParameters.identity was null or undefined when calling autocompletesearch.');
        }

        if (requestParameters.merchandiser === null || requestParameters.merchandiser === undefined) {
            throw new runtime.RequiredError('merchandiser','Required parameter requestParameters.merchandiser was null or undefined when calling autocompletesearch.');
        }

        const queryParameters: any = {};

        if (requestParameters.request !== undefined) {
            queryParameters['request'] = requestParameters.request;
        }

        if (requestParameters.identity !== undefined) {
            queryParameters['identity'] = requestParameters.identity;
        }

        if (requestParameters.merchandiser !== undefined) {
            queryParameters['merchandiser'] = requestParameters.merchandiser;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xGroupbyCustomerId !== undefined && requestParameters.xGroupbyCustomerId !== null) {
            headerParameters['X-Groupby-Customer-Id'] = String(requestParameters.xGroupbyCustomerId);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ClientKey authentication
        }

        const response = await this.request({
            path: `/api/request`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResultsFromJSON(jsonValue));
    }

    /**
     * A simple request used to get completes the specified prefix with keyword suggestions.
     */
    async autocompletesearch(requestParameters: AutocompletesearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResults> {
        const response = await this.autocompletesearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
