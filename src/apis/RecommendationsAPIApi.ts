/* tslint:disable */
/* eslint-disable */
/**
 * GroupBy Retail
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PredictResults,
  RecommendationsErrorResponse,
  RecommendationsRequest,
} from '../models/index';
import {
    PredictResultsFromJSON,
    PredictResultsToJSON,
    RecommendationsErrorResponseFromJSON,
    RecommendationsErrorResponseToJSON,
    RecommendationsRequestFromJSON,
    RecommendationsRequestToJSON,
} from '../models/index';

export interface PredictRequest {
    xGroupbyCustomerId: string;
    recommendationsRequest: RecommendationsRequest;
}

export interface PredictV2Request {
    xGroupbyCustomerId: string;
    recommendationsRequest: RecommendationsRequest;
}

/**
 * 
 */
export class RecommendationsAPIApi extends runtime.BaseAPI {

    /**
     * Perform a recommendation request against the GroupBy Retail Recommendations API.
     * Provide Recommendations AI functionality.
     */
    async predictRaw(requestParameters: PredictRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PredictResults>> {
        if (requestParameters.xGroupbyCustomerId === null || requestParameters.xGroupbyCustomerId === undefined) {
            throw new runtime.RequiredError('xGroupbyCustomerId','Required parameter requestParameters.xGroupbyCustomerId was null or undefined when calling predict.');
        }

        if (requestParameters.recommendationsRequest === null || requestParameters.recommendationsRequest === undefined) {
            throw new runtime.RequiredError('recommendationsRequest','Required parameter requestParameters.recommendationsRequest was null or undefined when calling predict.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xGroupbyCustomerId !== undefined && requestParameters.xGroupbyCustomerId !== null) {
            headerParameters['X-Groupby-Customer-Id'] = String(requestParameters.xGroupbyCustomerId);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ClientKey authentication
        }

        const response = await this.request({
            path: `/api/predict`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecommendationsRequestToJSON(requestParameters.recommendationsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PredictResultsFromJSON(jsonValue));
    }

    /**
     * Perform a recommendation request against the GroupBy Retail Recommendations API.
     * Provide Recommendations AI functionality.
     */
    async predict(requestParameters: PredictRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PredictResults> {
        const response = await this.predictRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform a recommendation request against the GroupBy Retail Recommendations API.
     * Provide Recommendations AI functionality.
     */
    async predictV2Raw(requestParameters: PredictV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PredictResults>> {
        if (requestParameters.xGroupbyCustomerId === null || requestParameters.xGroupbyCustomerId === undefined) {
            throw new runtime.RequiredError('xGroupbyCustomerId','Required parameter requestParameters.xGroupbyCustomerId was null or undefined when calling predictV2.');
        }

        if (requestParameters.recommendationsRequest === null || requestParameters.recommendationsRequest === undefined) {
            throw new runtime.RequiredError('recommendationsRequest','Required parameter requestParameters.recommendationsRequest was null or undefined when calling predictV2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xGroupbyCustomerId !== undefined && requestParameters.xGroupbyCustomerId !== null) {
            headerParameters['X-Groupby-Customer-Id'] = String(requestParameters.xGroupbyCustomerId);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ClientKey authentication
        }

        const response = await this.request({
            path: `/api/recommendation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecommendationsRequestToJSON(requestParameters.recommendationsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PredictResultsFromJSON(jsonValue));
    }

    /**
     * Perform a recommendation request against the GroupBy Retail Recommendations API.
     * Provide Recommendations AI functionality.
     */
    async predictV2(requestParameters: PredictV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PredictResults> {
        const response = await this.predictV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
